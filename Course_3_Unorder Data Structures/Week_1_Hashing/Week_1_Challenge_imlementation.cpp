#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <functional>

using namespace std;

int insert(int value, std::vector<int> &table) {
  // Code to insert value into a hashed location in table
  // where table is a vector of length 1000.
  // Returns the number of collisions encountered when
  // trying to insert value into table.
  int hash = value % 1000;
  int collisions = 0;
  
  if( -1 == table[hash] )
  {
    // hash slot is available, update hash table with value
    table[hash] = value;
  }
  else
  {
    
    while( -1 != table[hash] )
    {
      // hash collision occurrs
      collisions++;
      
      // linear probe
      hash++;
    }
    
    // probe a available slot, upte hash table with value
    table[hash] = value;
    
  }
  
  return collisions;
}
//end of function insert


// expected output of main:
/*

Hashing value 23373 experienced 11 collisions.

  0:  7000 19000 17002                          1007 16008      
 10:       14011             13014                              
 20:        7021 15022                    9026             12029
 30:             18032       10034        3036       21038  2039
 40:  6039    41  2042  8042 21038 24045 20046       11048      
 50:  4050              2053             18056 11057       20059
 60: 17060 23059                                            5069
 70: 24070       19072              2075              3078  8078
 80: 22078       15082       12084       20086       20088      
 90:  4090  5090 13090  9093 16094             24097  1098 14099
100: 15100 16099  1102 22102  1104       17106         108  2108
110:  7109 18110 12112  6113 11114                         10119
120: 18120  9121 22121 23119       14125 21125 24126            
130:        7131 19131              5135                        
140:               142   142  6144 14142 22146 23145            
150:              8152 15153 24154 23155  4156  1157 12158  5159
160:                         19164 18165  3166                  
170:              3172  8172                    7177 24177      
180:        2181 13182  7183       21185 11186 16187 17188 20187
190:             15192                    6196 24197 21198 14199
200: 24199                                           11208      
210:         211  3212  7213  9214 10212 15215 18214 20214 23212
220: 12220       22222                    7226                  
230:        5231  4232 14231 19234   235                   20239
240:                                2245  6246 11246        1249
250:                          3254 10255                        
260:       24261  9262  4263 14263                    8268 16269
270: 17269  4271 13271 21272                         10278      
280:             20282 23282 24284        2286              8289
290:                          7294  7294  6296  2297 15294 23297
300: 18300  5301                         12306 20306            
310:                     313 17313  4315 18313 22316  3318      
320:       19321             16324                         20329
330:  5330  1331 14332                          6337  8337 11338
340:             21342              9345 13346                  
350:  2350        1352  9352  4354                   13358 13358
360: 16358  6361                   10365  3366        1368 13368
370:         371 13371  9373 16372 16373 11376 22374 22376 10379
380:  4380 12381 10382  9383 23373  7385  1386 14386 18387 16389
390: 15390 24380                                                
400:  9400 20401 23400  4403                    5407 14407 17409
410: 18409        3412  9413 12414 21412        3417  2418 19418
420: 24417                                      6427  9427      
430: 10430 10430 17431   433              8436  9436 19436      
440:  4440 13440       23443                    7447 21447 22447
450:              9452             11455        6457            
460: 16460 17460 20462        6464  2465                        
470:                                           15477  4478 18477
480:  5480  1481 21480 12483 24478              9487 10488      
490:       21491                   18495  4496   497 14496      
500:       13501   502  7502  8504 23501 10506  3507 15506  2509
510:              7512 19513 22513                              
520:       17521                   12525              1528      
530:                                      3536        9538  9538
540:                   20543       11545 16546   547 20546      
550:       21551              1554  6555 15555 17556            
560:              6562             23565                   12569
570:        2571  7571 14572 23574 24573        5577  4578 20578
580:             18582 20583       12585 10586  9587  8588  5589
590: 13589 13590 15592 18587 19586  7595 22591       24598  6599
600:       14601 11602                    3606  4607  9606 16609
610: 17606                                                      
620:             16622              1625               628  2628
630:              7632                                          
640:                               18645       21647  4648      
650:                                 655  3656  6656 15658 19656
660: 11660 23656  3662  1663  3663  2665  9662 12666        8669
670: 14669                          5675 20676 16677       13679
680:  7680  4681 10682 17679 22684                              
690:                                      4696                  
700:       20701        8703                   15707            
710:                         21714         716             19719
720:                          2724                              
730:              1732 20732 13734  4735 18736 22735 18738      
740:             23742  6743  1744 17745        2747            
750:       11751                          3756  8756 13757 13759
760:  9760 14761 16762  7763  9763  5765 11766 12764 18763      
770:                                                            
780: 10780                               12786  9787  2788 14786
790: 17789 19787        4793        9795  6796  4797       21799
800: 15800                    3804               807 23807      
810:        1811                   16815        2817       22819
820:                         20824        5826  4827 16827      
830:                    3833       16835       12837 22837  9839
840: 18840 14841             13844                    9848 17848
850: 21849                   11854  8855  3856 18854  7858 12858
860:       10861  5862                   20866 16867 18868      
870:                    8873       14875                    6879
880: 19879                                           20888 21889
890:             18892       23894  2895 15895              7899
900:        7901   902 22901  4904                              
910:  1910  2911  4910  8911  8911 11910 16912  5917            
920: 22920 11921       11923  6924 14924 13926 16925 18926      
930:                    6933                    9937        9939
940:  3940 17940  6942         944  1945  2946                  
950: 10950  7951                               11957 12957      
960:                         19964 14965 19966                  
970:         971 22972 22972 20974 23971       14977       17979
980:       16981        4983  5984 21983                        
990:             15992        3994                          8999

*/

int main() {
  int i, j, hit, max_hit = 0, max_value = -1;

  std::vector<int> value(500);
  
  int old_value = 0;
  for (i = 0; i < 500; i++) {
    old_value += rand()%100;
    value[i] = old_value;
  }

  // create hash table of size 1000 initialized with -1
  std::vector<int> table(1000,-1);

  for (i = 0; i < 500; i++) {
    hit = insert(value[i],table);
    if (hit > max_hit) {
      max_hit = hit;  
      max_value = value[i];
    }
  }

  std::cout << "Hashing value " << max_value << " experienced " << max_hit << " collisions." << std::endl <<std::endl;

  for (j = 0; j < 1000; j += 10) {
    std::cout << std::setw(3) << j << ":";
    for (i = 0; i < 10; i++) {
      if (table[j+i] == -1)
        std::cout << "      ";
      else
        std::cout << std::setw(6) << table[j+i];
    }
    std::cout << std::endl;
  }

  return 0;
}